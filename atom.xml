<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fovever Young</title>
  <subtitle>Stay hungry Stay foolish.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cooooper.github.io/"/>
  <updated>2017-01-19T13:34:36.000Z</updated>
  <id>http://cooooper.github.io/</id>
  
  <author>
    <name>在路上。</name>
    <email>idevhan@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>我在京东的一次糟糕的购物体验</title>
    <link href="http://cooooper.github.io/2017/01/19/%E6%88%91%E5%9C%A8%E4%BA%AC%E4%B8%9C%E7%9A%84%E4%B8%80%E6%AC%A1%E7%B3%9F%E7%B3%95%E7%9A%84%E8%B4%AD%E7%89%A9%E4%BD%93%E9%AA%8C/"/>
    <id>http://cooooper.github.io/2017/01/19/我在京东的一次糟糕的购物体验/</id>
    <published>2017-01-19T13:33:56.000Z</published>
    <updated>2017-01-19T13:34:36.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;&lt;code&gt;点击进入详情查看内容&lt;/code&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h5 id=&quot;我在京东一次糟糕的购物体验&quot;&gt;&lt;a href=&quot;#我在京东一次糟糕的购物体验&quot; class=&quot;headerlink&quot; title=&quot;我在京东一次糟糕的购物体验&quot;&gt;&lt;/a&gt;我在京东一次糟糕的购物体验&lt;/h5&gt;&lt;p&gt;这是我有史以来最糟糕，最恶心的一次网上购物，发誓不会再在京东购物。&lt;/p&gt;
&lt;p&gt;事情是这样的，马上过年了，想着给爸妈换一台新的电视，选了好久，最终决定在京东上购买，因为我平时网上购物都是用的京东，就是觉得挺快的。于2017年1月8日晚从京东下单了一台的55寸曲面屏(UA55KC20SAJXXZ)，当时价格3999元。第二天早上10点左右接到物流的电话，说你在京东上订的电视今天送到，我说好的。挂了电话后我就查了一下物流，发现是京东委派三方物流公司，叫北京永鑫迅捷物流。这时还觉得他们的效率还挺高的。此时，我还不知道在京东上买大件家需要开箱验收。&lt;/p&gt;
&lt;p&gt;下午3点左右，收到我一个合租朋友的微信说截图如下，说开箱看了一下没有问题，说直接帮我签收了。期间，快递员和我朋友都没有跟我打招呼，就直接帮我签收了。&lt;/p&gt;
&lt;p&gt;因为公司要赶在年前把小程序版本做出，加班挺晚的，大概晚上9点左右到家，因为55寸的电视挺大的，我和我朋友（签收的这位）一起把箱子搬到客厅，我们一起开的箱子，一起小心的把电视从箱子里拿出，没有通电的情况下电视完好无损，当我连接电源以后就看到了如此严重的问题，如图。我当时就惊呆了，怎么会这样呢？我只好把电视装回箱子里，立即申请了退货处理，时间是晚上10点。我想着能顺利给我退货，我对京东还是比较信任的。可是，谁承想，撕逼之路才刚刚开始。&lt;/p&gt;
&lt;p&gt;我先和我朋友沟通了一下，试图还原一下当时发生了什么，他说他给快递开的门，快递说要不要开箱看一下，我朋友说，看一下吧，快递员问需要你签个字，我朋友就签上了我的名字。然后就有了上面我朋友给我发的微信，这个时候应该已经签过字了。我心想，我从来授权过快递员让其他任何人帮我签收，也没有授权我朋友去帮我签收。&lt;/p&gt;
&lt;p&gt;申请退货的第三天，接到京东客服的电话，我把问题给他们描述了一下，他们说尽快帮我核实，等了一天一直没回复，我就直接拨打了他们的客服电话，把问题给他们描述了一下，他们说，已经联系了三星售后，会尽快帮你处理的。第四天下午的时候接到三星售后打来的电话，我把情况给他们说了一遍，他们说电视已经有问题了他们提供不能无理由退货，建议你联系京东客服。我顺便问了他们这问题修一下多少钱，他们说2600左右。然后我强忍怒气联系了京东客服，把情况又给他们说了一遍。就这样联系不下五次，我一直给他们描述事情经过，他们的回应一直说尽快帮我处理。&lt;/p&gt;
&lt;p&gt;1月13日周五的时候，短信提示说，已经升级为专员处理，然后就接到他们的电话，说经过我们核实，商品签收的时候，是没有问题的，所以我们京东是不需要承担责任的，出于人文关怀，以及您的糟糕体验，决定给你500块钱的优惠券。当时瞬间火就上来了，我就一直给他们解释我说我开箱通电以后屏幕就是这样了，为什么要我承担损失，他们一直重复着他们的意思说京东没有责任，不管你怎么说他们都是这样重复着他们的话。最后他们说你考虑一下，这是京东能给你提供的解决方案了，我说这是你们最终的方案吗？他说是，我说我不接受，也不可能接受，这就是我的意思。沟通无果！&lt;/p&gt;
&lt;p&gt;1月14日周六下午，又接到了他们的客服电话，又让我把事情原委描述了一遍，他们说情况已经了解，我们会尽量帮您争取退换货的，我说如果是我个人损坏的，我完全愿意也应该我来承担，但是这真的不是我损坏的，为什么还要我承担？他们表示理解。这时候，我似乎看到了希望，不管他们的态度怎么样吧，只要是把电视给我换了，问题解决，我也不会和他们计较他们傲慢的态度了。&lt;/p&gt;
&lt;p&gt;1月16日周一下午，接到一个电话，说是京东仓库打来的，需要跟我的朋友通电话核实当时的情况，我说好。我给我朋友说你就把当时候的情况如实给他们描述一遍。然后就又没有了然后了。&lt;/p&gt;
&lt;p&gt;1月17号周二下午，他们的客服打来电话，就是周六说尽量帮我解决问题的那位。跟我说，经过我们的再次核实，不能给你退换货，出于人文关怀，决定给你500块钱的优惠券。我当时就彻底疯了。。你们一边又一遍的核实，最终的决定还只是500块钱的优惠券。我就说，不是我本人签收的，我也没有授权过任何一个人帮我签收，现在出了问题，为什么要我承担责任啊？他们说签收的时候没有问题，你朋友已经签过字了。我说我不承认。他们依然说京东平台是没有责任的，给你们500块钱优惠券是出于人道考虑！！！！！沟通无果。就在这时，我就有了去京东总部砸电视的想法。&lt;/p&gt;
&lt;p&gt;当时我就想，让京东帮你解决已经没有任何可能了，我就联系了12315，把情况又他们描述了一遍，他们说三个工作日京东会跟你联系。我说好。&lt;/p&gt;
&lt;p&gt;还是觉得没有希望，我又拨打了110，我给他们说明情况，他们说这不归他们处理，我说我周五上午要去京东总部把电视砸了可以吗？警察同志说，你觉得呢？我说我问你呢？她说你冷静一点，然后就说我给你转到12345（北京非紧急救助中心）了，我说好。我又把遇到的情况有跟12345工作人员又说了一遍。他们说会联系京东处理的，我说好。&lt;/p&gt;
&lt;p&gt;等到1月19日周四，他们一直没有回复我，我还在犹豫要不要去京东直播砸电视，让大家都知道京东的办事效率，以及他们高傲的态度，极端的不负责任。一直到中午，我接到了他们的电话，他们说，收到了12315的投诉，经过我们商议决定，再在500块钱优惠券的基础上，再送你200块钱优惠券，我当时就彻彻底底无语了。我说不是我签收的为什么要我承担，他们就说，那说签收的你找谁去啊？我都不知道怎么说了，我已经被气疯了。。我说不接受你们的方案，我唯一的诉求就是退货。沟通无果。&lt;/p&gt;
&lt;p&gt;在此时，我就决定了要去京东总部砸电视。而且直播！&lt;/p&gt;
&lt;p&gt;我知道我的维权之路非常艰辛，面对的是一个中国第二大互联网公司，第二大电商平台，但是我就是为了出这口气，当大家知道京东是怎么对待他们的钻石客户的。&lt;/p&gt;
&lt;p&gt;我不是为了输赢，我就是认真！这就是我，我叫韩亚辉，一名程序员。&lt;/p&gt;
&lt;p&gt;以上内容全部属实，如有半点虚假，我愿承担任何法律责任。&lt;/p&gt;
&lt;p&gt;全文完，感谢您的阅读，请麻烦帮我转发一下。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;code&gt;点击进入详情查看内容&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>余光中：怎样改进英式中文？——论中文的常态与变态</title>
    <link href="http://cooooper.github.io/2016/11/28/%E4%BD%99%E5%85%89%E4%B8%AD%EF%BC%9A%E6%80%8E%E6%A0%B7%E6%94%B9%E8%BF%9B%E8%8B%B1%E5%BC%8F%E4%B8%AD%E6%96%87%EF%BC%9F%E2%80%94%E2%80%94%E8%AE%BA%E4%B8%AD%E6%96%87%E7%9A%84%E5%B8%B8%E6%80%81%E4%B8%8E%E5%8F%98%E6%80%81/"/>
    <id>http://cooooper.github.io/2016/11/28/余光中：怎样改进英式中文？——论中文的常态与变态/</id>
    <published>2016-11-28T10:08:38.000Z</published>
    <updated>2016-11-28T10:09:47.000Z</updated>
    
    <content type="html">&lt;p&gt;自五四新文化运动以来，七十年间，中文的变化极大。一方面，优秀的作家与学者笔下的白话文愈写愈成熟，无论表情达意或是分析事理，都能运用自如。另一方面，地道的中文，包括文言文与民间文学的白话文，和我们的关系日渐生疏，而英文的影响，无论来自直接的学习或是间接的潜移默化，则日渐显著，因此一般人笔下的白话文，西化的病态日渐严重。一般人从大众传媒学到的，不仅是流行的观念，还有那些观念赖以包装的种种说法；有时，那些说法连高明之士也抗拒不了。今日的中文虽因地区不同而互见差异，但共同的趋势都是繁琐与生硬，例如中文本来是说「因此」，现在不少人却爱说「基于这个原因」；本来是说「问题很多」，现在不少人却爱说「有很多问题存在」。对于这种化简为繁、以拙代巧的趋势，有心人如果不及时提出警告，我们的中文势必越变越差，而地道中文原有的那种美德，那种简洁而又灵活的语文生态，也必将面目全非。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;中文也有生态吗？当然有。措词简洁、句式灵活、声调铿锵，这些都是中文生命的常态。能顺着这样的生态，就能长保中文的健康。要是处处违拗这样的生态，久而久之，中文就会污染而淤塞，危机日渐迫近。&lt;br&gt;目前中文的一大危机，是西化。我自己出身外文系，三十多岁时有志于中文创新的试验，自问并非语文的保守派。大凡有志于中文创作的人，都不会认为善用四字成语就是创作的能事。反之，写文章而处处仰赖成语，等于只会用古人的脑来想，只会用古人的嘴来说，绝非豪杰之士。但是，再反过来说，写文章而不会使用成语，问题就更大了。写一篇完全不带成语的文章，不见得不可能，但是很不容易；这样的文章要写得好，就更难能可贵。目前的情形是，许多人写中文，已经不会用成语，至少会用的成语有限，显得捉襟见肘。一般香港学生目前只会说「总的来说」，却似乎忘了「总而言之」。同样地，大概也不会说「一言难尽」，只会说「不是一句话就能够说得清楚的」。&lt;br&gt;成语历千百年而犹存，成为文化的一部分。例如「千锤百炼」，字义对称，平仄协调，如果一定要说成「千炼百锤」，当然也可以，不过听来不顺，不像「千锤百炼」那样含有美学。同样，「朝秦暮楚」、「齐大非偶」、「乐不思蜀」等语之中，都含有中国的历史。成语的衰退正显示文言的淡忘，文化意识的萎缩。&lt;br&gt;英文没有学好，中文却学坏了，或者可说，带坏了。中文西化，不一定就是毛病。缓慢而适度的西化甚至是难以避免的趋势，高妙的西化更可以截长补短。但是太快太强的西化，破坏了中文的自然生态，就成了恶性西化。这种危机，有心人都应该及时警觉而且努力抵制。在欧洲的语文里面，文法比较单纯的英文恐怕是最近于中文的了。尽管如此，英文与中文仍有许多基本的差异，无法十分融洽。这一点，凡有中英文互译经验的人，想必都能同意。其实，研究翻译就等于研究比较语言学。以下拟就中英文之间的差异，略略分析中文西化之病。&lt;br&gt;比起中文来，英文不但富于抽象名词，也喜欢用抽象名词。英文可以说「他的收入的减少改变了他的生活方式」，中文这么说，就太西化了。英文用抽象名词「减少」做主词，十分自然。中文的说法是以具体名词，尤其是人，做主词：「他因为收入减少而改变生活方式」，或者「他收入减少，乃改变生活方式」。&lt;br&gt;中文常用一件事情（一个短句）做主词，英文则常用一个名词（或名词词组）。「横贯公路再度坍方，是今日的头条新闻」，是中文的说法。「横贯公路的再度坍方，是今日的头条新闻」，就是英文语法的流露了。同理，「选购书籍，只好委托你了」是中文语法。「书籍的选购，只好委托你了」却是略带西化。「推行国语，要靠大家努力」是自然的说法。「推行的国语，要靠大家的努力」却嫌冗赘。这种情形也可见于受词。例如「他们杯葛这种风俗的继续」，便是一句可怕的话。无论如何，「杯葛继续」总嫌生硬。如果改成「他们反对保存这种风俗」，就自然多了。&lt;br&gt;英文好用抽象名词，其结果是软化了动词，也可以说是架空了动词。科学、社会科学与公文的用语，大举侵入了日常生活，逼得许多明确而有力动词渐渐变质，成为面无表情的词组。下面是几个常见的例子：&lt;br&gt;        apply pressure: press&lt;br&gt;        give authorization: permit&lt;br&gt;        send a communication: write&lt;br&gt;        take appropriate action: act&lt;br&gt;在前例之中，简洁的单音节动词都变成了含有抽象名词的片词，表面上看来，显得比较堂皇而高级。例如 press 变成了 apply pressure，动作便一分为二，一半驯化为静止的抽象名词 pressure，一半淡化为广泛而笼统的动词 apply。巴仁（Jacques Barzun）与屈林（Lionel Trilling）等学者把这类广泛的动词叫做「弱动词」（weak verb）。他们说：「科学报告不免单调而冷淡，影响之余，现代的文体喜欢把思路分解成一串静止的概念，用介词和通常是被动语气的弱动词连接起来。」&lt;br&gt;巴仁所谓的弱动词，相当于英国小说家奥韦尔所谓的「文字的义肢」（verbal false limb）。当代的中文也已呈现这种病态，喜欢把简单明了的动词分解成「万能动词＋抽象名词」的片词。目前最流行的万能动词，是「作出」和「进行」，恶势力之大，几乎要吃掉一半的正规动词。请看下面的例子：&lt;br&gt;        本校的校友对社会作出了重大的贡献。&lt;br&gt;        昨晚的听众对访问教授作出了十分热烈的反应。&lt;br&gt;        我们对国际贸易的问题已经进行了详细的研究。&lt;br&gt;        心理学家在老鼠的身上进行试验。&lt;br&gt;不管是直接或间接的影响，这样的语法都是日渐西化的现象，因为中文原有的动词都分解成上述的繁琐词组了。前面的四句话本来可以分别说成&lt;br&gt;        本校的校友对社会贡献很大。&lt;br&gt;        昨晚的听众对访问教授反应十分热烈。&lt;br&gt;        我们对国际贸易的问题已经详加研究。&lt;br&gt;        心理学家用老鼠来做试验（或：心理学家用老鼠试验）。&lt;br&gt;巴仁等学者感概现代英文喜欢化简为繁、化动为静、化具体为抽象、化直接为迂回，到了「名词成灾」（noun-plague）的地步。学问分工日细，各种学科的行话术语，尤其是科学与社会科学的「夹杠」，经过本行使用，外行借用，加上「新闻体」（journalese）的传播，一方面固然使现代英文显得多彩多姿，另一方面却也造成混乱，使日常用语斑驳不堪。英国诗人格雷夫斯（Robert Graves, 1895-1986）在短诗『耕田』（Tilth）里批评这现象说：&lt;br&gt;Gone are the sad monosyllabic days&lt;br&gt;When “agricultural labour”still was tilth;&lt;br&gt;And “100% approbation”, praise;&lt;br&gt;And “pornographic modernism”, filth-&lt;br&gt;And still I stand by tilth and filth and praise.&lt;br&gt;「名词成灾」的流行病里，灾情最严重的该是所谓「科学至上」（scientism）。在现代的工业社会里，科学早成显贵，科技更是骄子，所以知识分子的口头与笔下，有意无意，总爱用一些「学术化」的抽象名词，好显得客观而精确。有人称之为「伪术语」（pseudo-jargon）。例如：明明是 first step，却要说成 initial phase：明明是 letter，却要说成 communication，都属此类。&lt;br&gt;中文也是如此。本来可以说「名气」，却凭空造出一个「知名度」来，不说「很有名」，却要迂回作态，貌若高雅，说成「具有很高的知名度」，真是酸腐可笑。另一个伪术语是「可读性」，同样活跃于书评和出版广告。明明可以说「这本传记很动人」，「这本传记引人入胜」，或者干脆说「这本传记很好看」，却要说成「这本传记的可读性颇高」。我不明白这字眼怎么来的，因为这观念在英文里也只用形容词 readable 而不用抽象名词 readability。英文会说：The biography is highly readable，却不说 The biography has high readability。此风在台湾日渐嚣张。在电视上，记者早已在说「昨晚的演奏颇具可听性」。在书评里，也已见过这样的句子：「传统写实作品只要写得好，岂不比一篇急躁的实验小说更具可看性？」&lt;br&gt;我实在不懂那位书评家以不能说「岂不比一篇……更耐看（更动人）？」同理，「更具前瞻性」难道真比「更有远见」要高雅吗？长此以往，岂不要出现「他讲的这件趣事可笑性很高」一类的怪句？此外，「某某主义」之类抽象名词也使用过度，英美有心人士都主张少用为妙。中国大陆文章很爱说「富于爱国主义的精神」，其实颇有语病。爱国只是单纯的情感，何必学术化为主义？如果爱国也成主义，我们不是也可以说「亲日主义」、「仇美主义」、「怀乡主义」？其次，主义也就是一种精神，不必重复，所以只要说「富于爱国精神」就够了。&lt;br&gt;名词而分单数与复数，是欧语文的惯例。英文文法的复数变化，比起其它欧洲语文来，单纯得多。请看「玫瑰都很娇小」这句话在英文、法文、德文、西班牙文、意大利文里的各种说法：&lt;br&gt;        The roses are small.&lt;br&gt;        Les roses sont petites.&lt;br&gt;        Die Rosen sind klein.&lt;br&gt;        Las rosas son chiquitas.&lt;br&gt;        Le rose sono piccole.&lt;br&gt;每句话都是四个字，次序完全一样，都是冠词、名词、动词、形容词。英文句里，只有动词跟着名词变化，其它二字则不分单、复数。德文句里，只有形容词不变。法文、西班牙文、意大利文的三句里，因为做主词的名词是复数，其它的字全跟着变化。&lt;br&gt;幸而中文的名词没有复数的变化，也不区分性别，否则将不胜其繁琐。旧小说的对话里确有「爷们」、「娘们」、「ㄚ头们」等复数词，但是在叙述的部分，仍用「诸姐妹」、「众ㄚ鬟」。中文要表多数的时候，也会说「民众」、「徒众」、「观众」、「听众」，所以「众」也有点「们」的作用。但是「众」也好，「们」也好，在中文里并非处处需要复数语尾。往往，我们说「文武百官」，不说「官们」，也不说「文官们」、「武官们」。同理「全国的同胞」、「全校的师生」、「所有的顾客」、「一切乘客」当然是复数，不必再画蛇添足，加以标明。不少国人惑于西化的意识，常爱这么添足，于是「人们」取代原有的「人人」、「大家」、「大众」、「众人」、「世人」。「人们」实在是丑陃的西化词，林语堂绝不使用，希望大家也不要使用。电视上也有人说「民众们」、「听众们」、「球员们」，实在累赘。尤其「众、们」并用，已经不通。&lt;br&gt;中文词不分数量，有时也会陷入困境。例如「一位观众」显然不通，但是「观众之一」却嫌累赘，也欠自然。「一位观者」毕竟不像「一位读者」那么现成，所以，「一位观众来信说……」之类的句子，也只好由它去了。&lt;br&gt;可是「……之一」的泛滥，却不容忽视。「……之一」虽然是单数，但是背景的意识却是多数。和其它欧洲语文一样，英文也爱说 one of my favorite actresses, one of those who believe……, one of the most active promoters。中文原无「……之一」的句法，现在我们说「观众之一」实在是不得已。至于这样的句子：&lt;br&gt;        刘伶是竹林七贤之一。&lt;br&gt;        作为竹林七贤之一的刘伶……&lt;br&gt;目前已经非常流行。前一句虽然西化，但不算冗赘。后一句却恶性西化的畸婴，不但「作为」二字纯然多余，「之一的」也文白来杂，读来破碎，把主词「刘伶」压在底下，更是扭捏作态。其实，后一句的意思跟前一句完全一样，却把英文的语法 as one of the Seven Worthies of Bamboo Grove, Liu Ling……生吞活剥地搬到中文里来。&lt;br&gt;所以，与其说「作为竹林七贤之一的刘伶以嗜酒闻名」，何不平平实实地说「刘伶是竹林七贤之一，以嗜酒闻名」？其实前一句也尽有办法不说「之一」。中文本来可以说「刘伶乃竹林七贤之同侪」；「刘伶列于竹林七贤」；「刘伶跻身竹林七贤」；「刘伶是竹林七贤的同人」。&lt;br&gt;「竹林七贤之一」也好，「文房四宝之一」也好，情况都不严重，因为七和四范围明确，同时逻辑上也不能径说「刘伶是竹林七贤」，「砚乃文房四宝」。目前的不良趋势，是下列这样的句子：&lt;br&gt;        红楼梦是中国文学的名著之一。&lt;br&gt;        李广乃汉朝名将之一。&lt;br&gt;两句之中。「之一」都是蛇足。世间万事万物都有其同俦同类，每次提到其一，都要照顾到其它，也未免太周到了。中国文学名著当然不止一部，汉朝名将当然也不会祇有一人，不加上这死心眼的「之一」，绝对没有人会误会你孤陋寡闻，或者挂一漏万。一旦养成了这种恶习，只怕笔下的句子都要写成「小张是我的好朋友之一」，「我不过是您的平庸的学生之一」，「他的嗜好之一是收集茶壸」了。&lt;br&gt;「之一」之病到了香港，更变本加厉，成为「其中之一」。在香港的报刊上，早已流行「我是听王家的兄弟其中之一说的」或者「戴维连一直以来都是我最喜欢的导演其中之一」这类怪句。英文复数观念为害中文之深，由此可见。&lt;br&gt;这就说到「最……之一」的语法来了。英文最喜欢说「他是当代最伟大的思想家之一」，好像真是精确极了，其实未必。「最伟大的」是抬到至高，「之一」却稍加低抑，结果只是抬高，并未真正抬到至高。你并不知道「最伟大的思想家」究竟是几位，四位吗，还是七位，所以弹性颇大。兜了一个大圈子回来，并无多大不同。所以，只要说「他是一个大名人」或「他是赫赫有名的人物」就够了，不必迂而回之，说什么「他是最有名气的人物之一」吧。&lt;br&gt;在英文里，词性相同的字眼常用 and 来连接：例如 man and wife, you and I, back and forth。但在中文里，类似的场合往往不用连接词，所以只要说「夫妻」、「你我」、「前后」就够了。同样地，一长串同类词在中文里，也任其并列，无须连接：例如「东南西北」、「金木水火土」、「礼乐射御书数」、「柴米油盐酱醋茶」皆是。中国人绝不说「开门七件事，柴、米、油、盐、酱、醋以及茶。」谁要这么说，一定会惹笑。同理，中文只说「思前想后」、「说古道今」。可是近来 and 的意识已经潜入中文，到处作怪。港报上有过这样的句子：&lt;br&gt;在政治民主化与经济自由化的发展道路，台北显然比北京起步更早及迈步更快，致在政经体制改革的观念、行动、范围及对象，更为深广更具实质……&lt;br&gt;这样的文笔实在不很畅顺，例如前半句中，当做连接词的「与」、「及」都不必要。&lt;br&gt;「与」还可以说不必要，「及」简直就要不得。后半句的「更为深广更具实质」才像中文，「起步更早及迈步更快」简直是英文。「及」字破坏了中文生态，因为中文没有这种用法。此地一定要用连接词的话，也只能用「而」，不可用「及」。正如 slow but sure 在中文里该说「慢而可靠」或者「缓慢而有把握」，却不可说「慢及可靠」或者「缓慢与有把握」。「而」之为连接词，不但可表更进一步，例如「学而时习之」，还可表后退或修正，例如「国风好色而不淫，小雅怨诽而不乱」，可谓兼有 and 与 but 之功用。&lt;br&gt;目前的不良趋势，是原来不用连接词的地方，在 and 意识的教唆下，都装上了连接词；而所谓连接词都由「和」、「与」、「及」、「以及」包办，可是灵活而宛转的「而」、「并」、「而且」等词，几乎要绝迹了。&lt;br&gt;（※英：但也不要不当而而而！）&lt;br&gt;介词在英文里的用途远比中文里重要，简直成了英文的润滑剂。英文的不及物动词加上介词，往往变成了及物动词，例如 look after, take in 皆是。介词词组（prepositional phrase）又可当作形容词或助词使用，例如 a friend in need, said it in earnest。所以英文简直离不了介词。中文则不尽然。「扬州十日、嘉定三屠」两个词组不用一个介词，换了英文，非用不可。&lt;br&gt;「欢迎王教授今天来到我们的中间，在有关环境污染的各种问题上，为我们作一次学术性的演讲。」这样不中不西的开场白，到处可以听见。其实「中间」、「有关」等介词，都是画蛇添足。有一些圣经的中译，牧师的传道，不顾中文的生态，会说成「神在你的里面」。意思懂，却不像中文。&lt;br&gt;「有关」、「关于」之类，大概是用得最滥的介词了。「有关文革的种种，令人不能置信」；「今天我们讨论有关台湾交通的问题」；「关于他的申请，你看过了没有？」在这句子里，「有关」、「关于」完全多余。最近我担任「全国学生文学奖」评审，有一篇投稿的题目很长，叫「关于一个河堤孩子的成长故事」。十三个字里，「关于」两字毫无作用，「一个」与「故事」也可有可无。&lt;br&gt;「关于」有几个表兄弟，最出风的是「由于」。这字眼在当代中文里，往往用得不妥：&lt;br&gt;        由于秦末天下大乱，（所以）群雄四起。&lt;br&gt;        由于好奇心的驱使，我向窗内看了一眼。&lt;br&gt;        由于他的家境贫穷，使得他只好休学。&lt;br&gt;英文在形式上重逻辑，喜欢交代事物物的因果关系。中文则不尽然。「清风徐来，水波不兴」，其中当然有因果关系，但是中文只用上下文作不言之喻。换了是英文，恐怕会说「因为清风徐来，所以水波不兴」，或者「清风徐来，而不兴起水波」。上列的第一句，其实删掉「由于」与「所以」，不但无损文意，反而可使文章干净。第二句的「由于好奇心的驱使」并没有什么大毛病（注四），可是有点啰嗦，更犯不着动用「驱使」一类的正式字眼。如果简化为「出于好奇，我向窗内看了一眼」或者「为了好奇，我向窗内看了一眼」，就好多了。第三句的不通，犯者最多。「由于他的家境贫穷」这种词组，只能拿来修饰动词，却不能当做主词。这一句如果删掉「由于」，「使得」一类交代因果的冗词，写成「他家境贫穷，只好休学」，反觉眉清目秀。&lt;br&gt;英文的副词形式对中文为害尚不显著，但也已经开始了。例如这样的句子：&lt;br&gt;        他苦心孤诣地想出一套好办法来。&lt;br&gt;        老师苦口婆心地劝了他半天。&lt;br&gt;        大家苦中作乐地竟然大唱其民谣。&lt;br&gt;「苦」字开头的三句成语，本来都是动词，套上副词语尾的「地」就降为副词了。这么一来，文章仍然清楚，文法上却主客分明，太讲从属的关系，有点呆板。若把「地」一律删去，代以逗点，不但可以摆脱这主客的关系，语气也会灵活一些。&lt;br&gt;有时这样的西化副词词组太长，例如「他知其不可为而为之地还是去赴了约」，就更应把「地」删掉，代之以逗点，使句法松松筋骨。目前最滥的副词是「成功地」。有一次我不该为入学试出了这么一个作文题目：〈国父诞辰的感想〉，结果十个考生里至少有六个都说：「国父孙中山先生成功地推翻了满清。」这副词「成功地」在此毫无意义，因为既然推而翻之，就是成功了，何待重复。同理，「成功地发明了相对论」、「成功地泳渡了直布罗陀海峡」也都是饶舌之说。天下万事，凡做到的都要加上「成功地」，岂不累人？&lt;br&gt;白话文一用到形容词，似乎就离不开「的」，简直无「的」不成句了。在白话文里，这「的」字成了形容词除不掉的尾巴，至少会出现在这些场合：&lt;br&gt;        好的，好的，我就来。是的，没问题。&lt;br&gt;        快来看这壮丽的落日！&lt;br&gt;        你的笔干了，先用我的笔吧。&lt;br&gt;        也像西湖的有里外湖一样，丽芒分为大湖小湖两部分。&lt;br&gt;        他当然是别有用心的。你不去是对的。&lt;br&gt;喜欢用「的」或者无力拒「的」之人，也许还有更多的场合要偏劳这万能「的」字。我说「偏劳」，因为在英文里，形容词常用的语尾有 -tive, -able, -ical, -ous 等多种，不像在中文里全由「的」来担任。英文句子里常常连用几个形容词，但因语尾变化颇大，不会落入今日中文的公式。例如雪莱的句子：&lt;br&gt;An old, mad, blind, despised, and dying king,—&lt;br&gt;一连五个形容词，直译过来，就成了： 一位衰老的、疯狂的、瞎眼的、被人蔑视的、垂死的君王—&lt;br&gt;一碰到形容词，就不假思索，交给「的」去组织，正是流行的白话文所以僵化的原因。&lt;br&gt;白话文所以啰嗦而软弱，虚字太多是一大原因，而用得最滥的虚字正是「的」。学会少用「的」字之道，恐怕是白话文作家的第一课吧。其实许多名作家在这方面都很随便，且举数例为证：&lt;br&gt;（一）月光是隔了树照过来的，高处丛生的灌木，落下参差的斑驳的黑影，峭楞楞如鬼一般；弯弯的杨柳的稀疏的倩影，却又像是画在荷叶上。&lt;br&gt;（二）最后的鸽群……也许是误认这灰暗的凄冷的天空为夜色的来袭，或是也预感到风雨的将至，遂过早地飞回它们温暖的木舍。&lt;br&gt;（三）白色的鸭也似有一点烦躁了，有不洁的颜色的都市的河沟里传出它们焦急的叫声。&lt;br&gt;第一句的「参差的斑驳的黑影」和「弯弯的杨柳的稀疏的倩影」，都是单调而生硬的重迭。用这么多「的」，真有必要吗？为什么不能说「参差而斑驳」呢？后面半句的原意本是「弯弯的杨柳投下稀疏的倩影」，却不分层次，连用三个「的」，读者很自然会分成「弯弯的、杨柳的、稀疏的、倩影」。第二句至少可以省掉三个「的」。就是把「灰暗的凄冷的天空」改成「灰暗而凄冷的天空」，再把「夜色的来袭」和「风雨的将至」改成「夜色来袭」、「风雨将至」。前文说过，中文好用短句，英文好用名词，尤其是抽象名词。「夜色来袭」何等有力，「夜色的来袭」就松软下来了。最差的该是第三句了。「白色的鸭」跟「白鸭」有什么不同呢？「有不洁的颜色的都市的河沟」，乱用「的」字，最是惑人。此句原意应是「颜色不洁的都市河沟」（本可简化为）「都市的脏河沟」，但读者同样会念成「有不洁的、颜色的、都市的、河沟」。&lt;br&gt;目前的形容词又有了新的花样，那便是用学术面貌的抽象名词来打扮。再举数例为证：&lt;br&gt;        这是难度很高的技巧。&lt;br&gt;        他不愧为热情型的人。&lt;br&gt;        太专业性的字眼恐怕查不到吧。&lt;br&gt;「难度很高的」是什么鬼话呢？原意不就是「很难的」吗？同理，「热情型的人」就是「热情的人」；「太专业性的字眼」就是「太专门的字眼」。到抽象名词里去兜了一圈回来，门面像是堂皇了，内容仍是空洞的。&lt;br&gt;形容词或修饰语（modifier）可以放在名词之前，谓之前饰，也可以跟在名词之后，谓之后饰。法文往往后饰，例如纪德的作品 La Symphonie pastorale 与 Les Nourritures terrestres，形容词都跟在名词之后；若译成英文，例如 The Pastoral Symphony，便是前饰了。中文译为「田园交响乐」，也是前饰。&lt;br&gt;英文的形容词照例是前饰，例如前引雪莱的诗句，但有时也可以后饰，例如雪莱的另一诗句：One too like thee—tameless, and swift, and proud。至于形容词片或子句，则往往后饰，例如：man of action, I saw a man who looked like your brother。（※英：此例极佳，请注意！）&lt;br&gt;目前的白话文，不知何故，几乎一律前饰，似乎不懂后饰之道。例如前引的英文句，若用中文来说，一般人会不假思索说成：「我见到一个长得像你兄弟的男人。」却很少人会说：「我见到一个男人，长得像你兄弟。」如果句短，前饰也无所谓。如果句长，前饰就太生硬了。例如下面这句：「我见到一个长得像你兄弟说话也有点像他的陌生男人。」就冗长得尾大不掉了。要是改为后饰，就自然得多：「我见到一个陌生男人，长得像你兄弟，说话也有点像他。」其实文言文的句子往往是后饰的，例如司马迁写项羽与李广的这两句：&lt;br&gt;籍长八尺余，力能扛鼎，才气过人。&lt;br&gt;广为人长，猿臂，其善射亦天性也。&lt;br&gt;这两句在当代白话文里，很可能变成：&lt;br&gt;        项籍是一个身高八尺，力能扛鼎，同时才气过人的汉子。&lt;br&gt;        李广是一个高个子，手臂长得好像猿臂，天性就会射箭的人。&lt;br&gt;后饰句可以一路加下去，虽长而不失自然，富于弹性。前饰句以名词压底，一长了，就显得累赘，紧张，不胜负担。所以前饰句是关闭句，后饰句是开放句。&lt;br&gt;动词是英文文法的是非之地，多少纠纷，都是动词惹出来的。英文时态的变化，比起其它欧洲语文来，毕竟单纯得多。若是西班牙文，一个动词就会变出七十八种时态。&lt;br&gt;中文的名词不分单复与阴阳，动词也不变时态，不知省了多少麻烦。（阿房宫赋）的句子：「秦人不暇自哀，而后人哀之。后人哀之而不鉴之，亦使后人而复哀后人也。」就这么一个「哀」字，若用西文来说，真不知要玩出多少花样来。&lt;br&gt;中文本无时态变化，所以在这方面幸而免于西化。中国文化这么精妙，中文当然不会拙于分别时间之先后。散文里说：「人之将死，其言也善」；「议论未定，而兵已渡河。」诗里说：「已凉天气未寒时」。这里面的时态够清楚的了。苏轼的七绝：「荷尽已无擎雨盖，菊残犹有傲霜枝。一年好景君须记，最是橙黄橘绿时。」面的时序，有已逝，有将逝，更有正在发生，区别得准确而精细。&lt;br&gt;中文的动词既然不便西化，一般人最多也只能写出「我们将要开始比赛了」之类的句子，问题并不严重。动词西化的危机另有两端：一是单纯动词分解为「弱动词＋抽象名词」的复合动词，前文已经说过。不说「一架客机失事，死了九十八人」，却说「一架客机失事，造成九十八人死亡」，实在是迂回作态。&lt;br&gt;另一端是采用被动词语气。凡是及物动词，莫不发于施者而及于受者。所以用及物动词叙述一件事，不出下列三种方式：&lt;br&gt;        哥伦布发现了新大陆。&lt;br&gt;        新大陆被哥伦布发现了。&lt;br&gt;        新大陆被发现了。&lt;br&gt;第一句施者做主词，乃主动语气。第二句受者做主词，乃被动语气。第三句仍是受者做主词，仍是被动，却不见施者。这三种句子在英文里都很普遍，但在中文里却以第一种最常见，第二、第三种就少得多。第三种在中文里常变成主动语气，例如「糖都吃光了」，「戏看完了」，「稿写了一半」，「钱已经用了」。&lt;br&gt;目前西化的趋势，是在原来可以用主动语气的场合改用被动语气。请看下列的例句：&lt;br&gt;        我不会被你这句话吓倒。&lt;br&gt;        他被怀疑偷东西。&lt;br&gt;        他这意见不被人们接受。&lt;br&gt;        他被升为营长。&lt;br&gt;        他不被准许入学。&lt;br&gt;这些话都失之生硬，违反了中文的生态。其实，我们尽可还原为主动语气如下：&lt;br&gt;        你这句话吓不倒我。&lt;br&gt;        他有偷东西的嫌疑。&lt;br&gt;        他这意见大家都不接受。&lt;br&gt;        他升为营长。&lt;br&gt;        他未获准入学。&lt;br&gt;同样，「他被选为议长」不如「他当选为议长」。「他被指出许多错误」也不如「有人指出他许多错误」。「他常被询及该案的真相」也不如「常有人问起他该案的真相」。&lt;br&gt;目前中文的被动语气有两个毛病。一个是用生硬的被动语气来取代自然的主动语气。另一个是千篇一律只会用「被」字，似乎因为它发音近于英文的 by，却不解从「受难」到「遇害」，从「挨打」到「遭殃」，从「轻人指点」到「为世所重」，可用的字还有许多，不必套一个公式。&lt;br&gt;中文的西化有重有轻，有暗有明，但其范围愈益扩大，其现象愈益昭彰，颇有加速之势。以上仅就名词、连接词、介词、副词、形容词、动词等西化之病稍加分析，希望读者能举一反三，知所防范。&lt;br&gt;常有乐观的人士说，语言是活的，有如河流，不能阻其前进，所谓西化乃必然趋势。语言诚然是活的，但应该活得健康，不应带病延年。至于河流的比喻，也不能忘了两岸，否则泛滥也会成灾。西化的趋势当然也无可避免，但不宜太快、太甚，应该截长补短，而非以短害长。&lt;br&gt;颇有前卫作家不以杞人之忧为然，认为坚持中文的常规，会妨碍作家的创新。这句话我十分同情，因为我也是「过来人」了。「语法岂为我辈而设哉！」诗人本有越界的自由。我在本文强调中文的生态，原为一般写作说法，无意规范文学的创作。前卫作家大可放心去追逐缪思，不用碍手碍脚，作语法之奴。&lt;br&gt;不过有一点不可不知。中文发展了好几千年，从清通到高妙，自有千锤百炼的一套常态。谁要是不知常态为何物而贸然自诩为求变，其结果也许只是献拙，而非生巧。变化之妙，要有常态衬托才显得出来。一旦常态不存，余下的只是乱，不是变了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;自五四新文化运动以来，七十年间，中文的变化极大。一方面，优秀的作家与学者笔下的白话文愈写愈成熟，无论表情达意或是分析事理，都能运用自如。另一方面，地道的中文，包括文言文与民间文学的白话文，和我们的关系日渐生疏，而英文的影响，无论来自直接的学习或是间接的潜移默化，则日渐显著，因此一般人笔下的白话文，西化的病态日渐严重。一般人从大众传媒学到的，不仅是流行的观念，还有那些观念赖以包装的种种说法；有时，那些说法连高明之士也抗拒不了。今日的中文虽因地区不同而互见差异，但共同的趋势都是繁琐与生硬，例如中文本来是说「因此」，现在不少人却爱说「基于这个原因」；本来是说「问题很多」，现在不少人却爱说「有很多问题存在」。对于这种化简为繁、以拙代巧的趋势，有心人如果不及时提出警告，我们的中文势必越变越差，而地道中文原有的那种美德，那种简洁而又灵活的语文生态，也必将面目全非。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Other" scheme="http://cooooper.github.io/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>多年前</title>
    <link href="http://cooooper.github.io/2016/10/31/%E5%A4%9A%E5%B9%B4%E5%89%8D/"/>
    <id>http://cooooper.github.io/2016/10/31/多年前/</id>
    <published>2016-10-31T06:53:51.000Z</published>
    <updated>2016-11-28T10:12:40.000Z</updated>
    
    <content type="html">&lt;p&gt;###The following words were written on the tomb of an Anglican Bishop in the Crypts of Westminster Abbey:&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;###When I was young and free and my imagination had no limits, I dreamed of changing the world. As i grew older and wiser, I discovered the world would not change,so I shortened my sights somewhat and decided to change only my country.But it, too, seemed immovable.&lt;/p&gt;
&lt;p&gt;###As I grew into my twilight years, in one last desperate attempt, I settled for changing only my family, those closest to me, but alas, they would have none of it.And now as I lie on my deathbed, I suddenly realize: If I had only changed my self first, then by example I would have changed my family.From their inspiration and encouragement, I would then have been able to better my country and, who knows, I may have even changed the world.&lt;/p&gt;
&lt;p&gt;###在威斯敏斯特教堂地下室英国圣公会主教的墓碑上写着这样的一段话:&lt;/p&gt;
&lt;p&gt;###当我年轻自由的时候，我的想象力没有任何局限，我梦想改变这个世界。当我渐渐成熟明智的时候，我发现这个世界是不可能改变的，于是我将眼光放得短浅了一些，那就只改变我的国家吧。但是我的国家似乎也是不能改变的。当我到了迟暮之年，抱着最后一丝努力的希望，我决定只改变我的家庭，我亲近的人，但是他们根本不接受改变。现在在我临终之时，我才突然意识到：如果起初我只改变自己，接着我就可以依此改变我的家人。在他们的激发和鼓励下，我可能就能改善我的国家。接下来，谁又知道呢，也许我连整个世界都可以改变。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;###The following words were written on the tomb of an Anglican Bishop in the Crypts of Westminster Abbey:&lt;/p&gt;
    
    </summary>
    
    
      <category term="life" scheme="http://cooooper.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>格式化Number 小技巧</title>
    <link href="http://cooooper.github.io/2016/07/08/%E6%A0%BC%E5%BC%8F%E5%8C%96Number-%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://cooooper.github.io/2016/07/08/格式化Number-小技巧/</id>
    <published>2016-07-08T06:11:09.000Z</published>
    <updated>2016-11-24T04:09:43.000Z</updated>
    
    <content type="html">&lt;p&gt;请进入详情查看&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;原值:2.7999999999&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typedef CF_ENUM(CFIndex, CFNumberFormatterRoundingMode) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kCFNumberFormatterRoundCeiling = 0,//四舍五入,直接输出3 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kCFNumberFormatterRoundFloor = 1,//保留小数输出2.8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kCFNumberFormatterRoundDown = 2,//加上了人民币标志,原值输出￥2.8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kCFNumberFormatterRoundUp = 3,//本身数值乘以100后用百分号表示,输出280%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kCFNumberFormatterRoundHalfEven = 4,//输出2.799999999E0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kCFNumberFormatterRoundHalfDown = 5,//原值的中文表示,输出二点七九九九。。。。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    kCFNumberFormatterRoundHalfUp = 6//原值中文表示,输出第三&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;NSNumberFormatter *formatter = [[NSNumberFormatter alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;formatter.numberStyle = kCFNumberFormatterRoundHalfDown;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSString *string = [formatter stringFromNumber:[NSNumber numberWithInt:12]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NSLog(@&amp;quot;str = %@&amp;quot;, string);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;请进入详情查看&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CocoaPods安装使用和错误</title>
    <link href="http://cooooper.github.io/2016/06/15/CocoaPods%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E5%92%8C%E9%94%99%E8%AF%AF/"/>
    <id>http://cooooper.github.io/2016/06/15/CocoaPods安装使用和错误/</id>
    <published>2016-06-15T09:50:28.000Z</published>
    <updated>2016-11-24T04:09:19.000Z</updated>
    
    <content type="html">&lt;p&gt;Cocopods的安装&lt;br&gt;CocoaPods应该是iOS最常用最有名的类库管理&lt;br&gt;当我们开发iOS应用时，会经常使用到很多第三方开源类库，比如AFNetWorking等等，可能某个类库又用到其他的库，手动一个个去下载所需类库十分麻烦。如果我们项目中用到的类库有更新，还要重新下载新版本，重新加入到项目中，十分麻烦。所以，我们需要 CocoaPods帮我们管理。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;如何下载和安装CocoaPods？&lt;br&gt;在安装CocoaPods之前，首先要在本地安装好Ruby环境。至于如何在Mac中安装好Ruby环境，请找度娘和谷哥。&lt;br&gt;假如你在本地已经安装好Ruby环境，那么下载和安装CocoaPods将十分简单，只需要一行命令。在Terminator中输入以下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是,在终端中敲入这个命令之后，可能半天没有任何反应。&lt;/p&gt;
&lt;p&gt;这时我们可以用淘宝的Ruby镜像来访问cocoapods。按照下面的顺序在终端中敲入依次敲入命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gem sources --remove https://rubygems.org/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;//等有反应之后再敲入以下命令&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gem sources -a https://ruby.taobao.org/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为了验证你的Ruby镜像是并且仅是taobao，可以用以下命令查看：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gem sources -l
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;只有在终端中出现下面文字才表明你上面的命令是成功的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*** CURRENT SOURCES ***
https://ruby.taobao.org/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这时候，我们再次在终端中运行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gem install cocoapods

$ pod setup
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;等一会，CocoaPods就可以在你本地下载并且安装好了&lt;/p&gt;
&lt;p&gt;安装时候遇到的问题：&lt;br&gt;Setting up CocoaPods master repo&lt;br&gt;[!] /usr/bin/git clone &lt;a href=&quot;https://github.com/CocoaPods/Specs.git&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/CocoaPods/Specs.git&lt;/a&gt;  master –depth=1&lt;/p&gt;
&lt;p&gt;Cloning into ‘master’…&lt;br&gt;error: RPC failed; result=18, HTTP code = 200&lt;br&gt;fatal: The remote end hung up unexpectedly&lt;br&gt;fatal: early EOF&lt;br&gt;fatal: index-pack failed&lt;br&gt;解决办法：&lt;br&gt;$ git config –global http.postBuffer 24288000&lt;br&gt;$ git config –list&lt;br&gt;会输出：http.postbuffer=24288000&lt;/p&gt;
&lt;p&gt;再次执行:&lt;/p&gt;
&lt;p&gt;$ pod setup&lt;br&gt;Cocopods使用&lt;br&gt;我们想用CocoaPods，在项目中导入ASIHTTPRequest类库&lt;br&gt;首先，我们要确定ASIHTTPRequest是否支持CocoaPods，可以用CocoaPods的搜索功能验证一下。在终端中输入：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pod search ASIHTTPRequest
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输入之后，你会在终端中看到关于ASIHTTPRequest类库的一些信息。&lt;br&gt;比如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-&amp;gt; ASIHTTPRequest (1.8.2)
   Easy to use CFNetwork wrapper for HTTP requests, Objective-C, Mac    OS X and  iPhone.
   pod &amp;apos;ASIHTTPRequest&amp;apos;, &amp;apos;~&amp;gt; 1.8.2&amp;apos;
   - Homepage: http://allseeing-i.com/ASIHTTPRequest
   - Source:   https://github.com/pokeb/asi-http-request.git
   - Versions: 1.8.2, 1.8.1 [master repo]
   - Sub specs:
   - ASIHTTPRequest/Core (1.8.2)
   - ASIHTTPRequest/ASIWebPageRequest (1.8.2)
   - ASIHTTPRequest/CloudFiles (1.8.2)
   - ASIHTTPRequest/S3 (1.8.2)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在知道ASIHTTPRequest支持Cocopods了，我们就要道你的项目中创建一个文件，这个文件就叫做“Podfile”，一定得是这个文件名，而且没有后缀。在里面添加pod ‘ASIHTTPRequest’, ‘~&amp;gt; 1.8.2’,就是告诉CocoaPods,我们要下载ASIHTTPRequest ，1.8.2版本&lt;/p&gt;
&lt;p&gt;我们先创建这个PodFile文件。在终端中进入（cd命令）你项目所在目录，然后在当前目录下，利用vim创建Podfile，运行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ vim Podfile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后在Podfile文件中输入以下文字：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pod &amp;quot;ASIHTTPRequest&amp;quot;, &amp;quot;~&amp;gt; 1.8.2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后保存退出。vim环境下，保存退出命令是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;:wq!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们会发现项目中，多了一个名字为Podfile的文件，而且文件内容就是输入的内容。注意，Podfile文件应该和你的工程文件.xcodeproj在同一个目录下。&lt;/p&gt;
&lt;p&gt;下面我们就可以利用CocoPods下载ASIHTTPRequest类库了。还是在终端中的当前项目下，运行命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pod install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行完命令之后，会看见有这句话[!] From now on use &lt;strong&gt;&lt;em&gt;**&lt;/em&gt;&lt;/strong&gt;.xcworkspace这是说：以后打开项目就用 &lt;strong&gt;.xcworkspace 打开，而不是之前的&lt;/strong&gt;.xcodeproj文件。&lt;/p&gt;
&lt;p&gt;现在，我们就可以开始使用ASIHTTPRequest啦。可以测试一下，在项目中输入：&lt;/p&gt;
&lt;p&gt;#import &lt;afnetworking.h&gt;或者#import “AFNetworking.h”试试&lt;/afnetworking.h&gt;&lt;/p&gt;
&lt;p&gt;如果以后有更新 或者 添加别的类库，用update命令即可：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pod update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;CocoaPods 报错&lt;br&gt;Xcode 升级到 6.0 后，更新 CocoaPods 或者以前手动添加过第三方SDK改用Cocopods，可能会出现以下的错误&lt;/p&gt;
&lt;p&gt;错误1：&lt;br&gt;     [!] The &lt;code&gt;Paopao [Debug]&lt;/code&gt; target overrides the &lt;code&gt;PODS_ROOT&lt;/code&gt; build setting defined in `Pods/Target Support Files/Pods/Pods.debug.xcconfig’. This can lead to problems with the CocoaPods installation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use the &lt;code&gt;$(inherited)&lt;/code&gt; flag, or&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove the build settings from the target.&lt;/p&gt;
&lt;p&gt;  [!] The &lt;code&gt;Paopao [Debug]&lt;/code&gt; target overrides the &lt;code&gt;OTHER_LDFLAGS&lt;/code&gt; build setting defined in `Pods/Target Support Files/Pods/Pods.debug.xcconfig’. This can lead to problems with the CocoaPods installation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;$(inherited)&lt;/code&gt; flag, or&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove the build settings from the target.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[!] The `Paopao [Release]` target overrides the `PODS_ROOT` build setting defined in `Pods/Target Support Files/Pods/Pods.release.xcconfig&amp;apos;. This can lead to problems with the CocoaPods installation
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;$(inherited)&lt;/code&gt; flag, or&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove the build settings from the target.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[!] The `Paopao [Release]` target overrides the `OTHER_LDFLAGS` build setting defined in `Pods/Target Support Files/Pods/Pods.release.xcconfig&amp;apos;. This can lead to problems with the CocoaPods installation
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;$(inherited)&lt;/code&gt; flag, or&lt;/li&gt;
&lt;li&gt;Remove the build settings from the target.&lt;br&gt;产生此警告的原因是项目 Target 中的一些设置，CocoaPods 也做了默认的设置，如果两个设置结果不一致，就会造成问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我想要使用 CocoaPods 中的设置，分别在我的项目中定义PODS_ROOT 和 Other Linker Flags的地方，把他们的值用$(inherited)替换掉，进入终端，执行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pod update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;警告没了&lt;/p&gt;
&lt;p&gt;我个人更喜欢一种简单粗暴的方法：&lt;/p&gt;
&lt;p&gt;点击项目文件 project.xcodeproj，右键显示包内容，用文本编辑器打开project.pbxproj，删除OTHER_LDFLAGS的地方，保存，pod update,警告没了。。。。&lt;/p&gt;
&lt;p&gt;错误2：&lt;/p&gt;
&lt;p&gt;错误&lt;br&gt;这个解决也比较简单，&lt;br&gt;在Build Setting 中的Other Linker Flags选项中加入$(OTHER_LDFLAGS) 如图：&lt;/p&gt;
&lt;p&gt;解决错误&lt;br&gt;编译通过………&lt;/p&gt;
&lt;p&gt;文／青楼（简书作者）&lt;br&gt;原文链接：&lt;a href=&quot;http://www.jianshu.com/p/b5315bf42975&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.jianshu.com/p/b5315bf42975&lt;/a&gt;&lt;br&gt;著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Cocopods的安装&lt;br&gt;CocoaPods应该是iOS最常用最有名的类库管理&lt;br&gt;当我们开发iOS应用时，会经常使用到很多第三方开源类库，比如AFNetWorking等等，可能某个类库又用到其他的库，手动一个个去下载所需类库十分麻烦。如果我们项目中用到的类库有更新，还要重新下载新版本，重新加入到项目中，十分麻烦。所以，我们需要 CocoaPods帮我们管理。&lt;/p&gt;
    
    </summary>
    
    
      <category term="cocoaPods" scheme="http://cooooper.github.io/tags/cocoaPods/"/>
    
  </entry>
  
  <entry>
    <title>UILocalized​Indexed​Collation</title>
    <link href="http://cooooper.github.io/2016/06/11/UILocalized%E2%80%8BIndexed%E2%80%8BCollation/"/>
    <id>http://cooooper.github.io/2016/06/11/UILocalized​Indexed​Collation/</id>
    <published>2016-06-10T16:03:08.000Z</published>
    <updated>2016-11-24T04:09:04.000Z</updated>
    
    <content type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;hr&gt;
&lt;p&gt;UILocalized​Indexed​Collation使用方法&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;a href=&quot;http://nshipster.cn/uilocalizedindexedcollation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;UILocalized​Indexed​Collation&lt;/a&gt;用法&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;hr&gt;
&lt;p&gt;UILocalized​Indexed​Collation使用方法&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;a href=&quot;http://nshipster.cn/uilocalizedindexedcollation/&quot; ta
    
    </summary>
    
    
      <category term="ios" scheme="http://cooooper.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>XcodeGhost 是怎么回事</title>
    <link href="http://cooooper.github.io/2016/05/18/XcodeGhost-%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B/"/>
    <id>http://cooooper.github.io/2016/05/18/XcodeGhost-是怎么回事/</id>
    <published>2016-05-18T10:05:53.000Z</published>
    <updated>2016-11-24T04:08:03.000Z</updated>
    
    <content type="html">&lt;p&gt;Ken Thompson，C语言前身B语言的作者，Unix的发明人之一(另一个是Dennis M. Riche老大，被尊为DMR)，Belle(一个厉害的国际象棋程序)的作者之一, 操作系统Plan 9的主要作者(另一个是大牛人Rob Pike, 前不久被google挖走了)。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Ken爷爷也算是计算机历史上开天辟地的人物了。1969年还是计算机史前时代，普通人都认为只有大型机才能运行通用的操作系统，小型机只有高山仰止的份儿。至于用高级语言来写操作系统，更是笑谈。Ken爷爷自然不是池中物，于是他和DMR怒了，在1969年到1970间用汇编在PDP-7上写出了UNIX的第一个版本。他们并不知道，一场轰轰烈烈的UNIX传奇由此拉开了序幕。Ken爷爷在1971年又把Unix用C重写，于是C在随后20年成就了不知多少豪杰的梦想和光荣。&lt;/p&gt;
&lt;p&gt;Ken爷爷还有段佳话： 装了UNIX的PDP-11最早被安装在Bell Lab里供大家日常使用。很快大家就发现Ken爷爷总能进入他们的帐户，获得最高权限。Bell Lab里的科学家都心比天高，当然被搞得郁闷无比。于是有高手怒了，跳出来分析了UNIX代码，找到后门，修改代码，然后重新编译了整个UNIX。就在大家都以为“这个世界清净了”的时候，他们发现Ken爷爷还是轻而易举地拿到他们的帐户权限，百思不解后，只好继续郁闷。谁知道这一郁闷，就郁闷了14年，直到Ken爷爷道出个中缘由。原来，代码里的确有后门，但后门不在Unix代码里，而在编译Unix代码的C编译器里。每次C编译器编译UNIX的代码，就自动生成后门代码。而整个Bell Lab的人，都是用Ken爷爷的C编译器。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Ken Thompson，C语言前身B语言的作者，Unix的发明人之一(另一个是Dennis M. Riche老大，被尊为DMR)，Belle(一个厉害的国际象棋程序)的作者之一, 操作系统Plan 9的主要作者(另一个是大牛人Rob Pike, 前不久被google挖走了)。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>马太效应</title>
    <link href="http://cooooper.github.io/2016/05/18/%E9%A9%AC%E5%A4%AA%E6%95%88%E5%BA%94/"/>
    <id>http://cooooper.github.io/2016/05/18/马太效应/</id>
    <published>2016-05-18T10:02:11.000Z</published>
    <updated>2016-11-24T04:05:02.000Z</updated>
    
    <content type="html">&lt;p&gt;马太效应（Matthew Effect），指强者愈强、弱者愈弱的现象，广泛应用于社会心理学、教育、金融以及科学领域。马太效应，是社会学家和经济学家们常用的术语，反映的社会现象是两级分化，富的更富，穷的更穷[1]  。名字来自圣经《新约·马太福音》一则寓言： “凡有的，还要加倍给他叫他多余；没有的，连他所有的也要夺过来”。“马太效应”与“平衡之道”相悖；与“二八定则”类似，是十分重要的自然法则。中国古代哲学家老子曾提出类似的思想：“天之道，损有余而补不足。人之道则不然，损不足以奉有余。”&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;马太效应的名字就来源于圣经《新约·马太福音》中的一则寓言：从前，一个国王要出门远行，临行前，交给3个仆人每人一锭银子，吩咐道:“你们去做生意，等我回来时，再来见我。”国王回来时，第一个仆人说:“主人，你交给我的一锭银子，我已赚了10锭。”于是，国王奖励他10座城邑。第二个仆人报告:“主人，你给我的一锭银子，我已赚了5锭。”于是，国王奖励他5座城邑。第三仆人报告说:“主人，你给我的1锭银子，我一直包在手帕里，怕丢失，一直没有拿出来。[3]  ”&lt;/p&gt;
&lt;p&gt;于是，国王命令将第三个仆人的1锭银子赏给第一个仆人，说:“凡是少的，就连他所有的，也要夺过来。凡是多的，还要给他，叫他多多益善。”这就是“马太效应”[3]  ，反应当今社会中存在的一个普遍现象，即赢家通吃[3]  。&lt;/p&gt;
&lt;p&gt;社会领域&lt;/p&gt;
&lt;p&gt;许多残疾人就不了业，上不了学，上学和受教育对一般的孩子来说只不过是基本权利，可对许多残疾的孩子来说是梦想，先残疾，再失学，然后失业，最后失去生存能力，这就是最明显的马太效应。也是最残酷的马太效应。因为在21世纪，信息化社会，竞争强烈的社会，一个人如果不接受任何的教育，必然成为社会的废人，更何况身体条件很差的人，可想而知。以海南为例，全省15岁以上残疾人文盲人口有22.86万人，文盲率为46.27%。&lt;/p&gt;
&lt;p&gt;笔者认为残疾人入学难不只是教育资源紧张和经费紧张的问题，还有就是普通学校无障碍建设的问题，家长的思想问题，如果家长思想问题和无障碍建设问题不解决，无论再多经费投入也不能从根本上解决残疾人教育的，因为有些家长怕丢人等原因，他们情愿把孩子放在家里，不想让孩子出去外面见人，更不想让孩子上学。由于普通学校很少考虑到残疾学生，没有无障碍设计，比如专用楼梯等，因此造成了一些肢体残疾的孩子上不了学，肢体残疾的孩子是无法进特殊学校的。残疾人需要适应社会，社会也要适应残疾人。&lt;/p&gt;
&lt;p&gt;品牌的营销创新启示&lt;/p&gt;
&lt;p&gt;随着经济全球化和我国加入WTO之后，国内企业品牌资本的构建日益迫切，企业积聚绝对优势的品牌资本，创造持续的价值，推动整合的市场资源，形成有形和无形的巨大财富效应，对于企业来说将会在日益激烈的市场竞争中立于不败之地。&lt;/p&gt;
&lt;p&gt;积聚品牌资本是顺应企业占领市场最高点的现实需求。品牌资本是全球市场消费革命的源动力，不仅涉及到生活领域，而且也涉及经济金融领域。人们在追求生活品牌的同时，对金融也必然有品牌的要求。国内的企业如果不培育自己的品牌，将来就难以满足这些日益高新化的需求。&lt;/p&gt;
&lt;p&gt;积聚品牌资本是持续创造价值的核心要求。没有价值的品牌是无源之水，无本之木，品牌只有具有无形资产价值所具有的特性如制订标准和拥有核心的技术，品牌只有具备向有形资产可转化的价值，品牌只有与资本进行有机的对接，形成绝对的品牌资本优势才能为企业提供源源不断的财富源泉。&lt;/p&gt;
&lt;p&gt;积聚品牌资本是整合营销、创造财富的必由之路。品牌是需要营销的，营销可以提升品牌的知名度。品牌的形成和确立是一个从认识到认知再到认可的过程，最后达到认同的目的。整合市场资源可以在更大范围内营销品牌，提升品牌的知名度。品牌资本外在的表现形式为可量化的价值，品牌资本的内在表现形式为消费者心中的接受程度和评判标准。&lt;/p&gt;
&lt;p&gt;教育领域&lt;/p&gt;
&lt;p&gt;教育中的马太效应主要可从这么几个方面来看：&lt;/p&gt;
&lt;p&gt;其一，越是教授、专家，得到的科研经费多，社会兼职越多，各种名目的评奖似乎就是为他们设立的。在科研领域存在这样一种怪现象：科研经费的使用基本被垄断，从立项、评选、经费分配基本由少数专家控制。尽管某些项目从立题到完成与一些专家没任何关系，但是，无论立项书还是最终成果也必须将某些知名专家的大名冠于首位。这样一来，一般学者的劳动果实都成了专家的“成果”，使少数专家成了科研寡头。据说，某市级教育科研项目基本都是几位知名评委瓜分。&lt;/p&gt;
&lt;p&gt;马太效应”的出现实质是社会强势群体对于社会弱势群体平等的教育权的掠夺，必将加速社会财富与权力的两极分化，加剧社会矛盾，最终会引起社会的震荡；它造成了局部的繁荣，却扼杀了作为整体的教育的生命，就像癌细胞的过度繁殖必将危及到作为整体的人的生命，而人生命的丧失却又使癌细胞失去了生存的基础，最后也必与个体的生命一起消失，连局部的繁荣都将不可得。&lt;/p&gt;
&lt;p&gt;在学校教育中，“马太效应”的作用是消极的。例如，一个品学兼优的好学生，学校领导称赞他，班主任更是经常表扬，回到家中也倍受宠爱，如此优越的成长环境，带给他的也不都是欢乐。学生们给他的是这样的“优待”，风言风语声声：“老师就想着他一个，什么好处都是他的。”“老师就夸他能力强，经常出风头，能力能不强吗？他有缺点，但老师还要护着他。”“什么三好学生，优秀团员和干部，都是他得的，老师就是戴着有色眼镜看人。”等等。这类事情在学校并不鲜见，如果不注意这种“马太效应”，那就必然造成只重视和培养少数拔尖学生，忽视和放弃大多数学生，形成少数和多数的隔膜、分化、对立。所以有经验的老师往往这样说：要偏爱差生，发掘他们身上的闪光点。&lt;/p&gt;
&lt;p&gt;企业经营&lt;/p&gt;
&lt;p&gt;马太效应揭示了一个不断增长个人和企业资源的需求原理，是影响企业发展和个人成功的一个重要法则。&lt;/p&gt;
&lt;p&gt;对企业经营发展而言[3]  ，马太效应告诉我们:要想在某一个领域保持优势，就必须在此领域迅速做大。当你成为某个领域的领头羊时，即便投资回报率相同，你也能更轻易地获得比弱小的同行更大的收益。而若没有实力迅速在某个领域做大，就要不停地寻找新的发展领域，才能保证获得较好的回报[3]  。&lt;/p&gt;
&lt;p&gt;缺陷&lt;/p&gt;
&lt;p&gt;马太效应理论的缺陷主要在于缺乏辩证思维：&lt;/p&gt;
&lt;p&gt;1，只看到事物发展的短期趋势，只反映了数量方面的变化，忽视了性质的变化，不能用于分析事物发展的长期趋势；事实上，在客观世界，任何事物都遵循发生-发展-成熟-衰老-灭亡的规律，没有什么是永远不变的。&lt;/p&gt;
&lt;p&gt;2, 不具备普遍意义，只是对短期趋势理论的一种假说，难以证明普遍的真理性。比如，难以解释在很多领域存在的“后发优势”现象。&lt;/p&gt;
&lt;p&gt;经济学中的马太效应&lt;/p&gt;
&lt;p&gt;“马太效应”是十几年来经济学界经常提及的，经济学界用它提醒决策者，要避免贫富差别过大。此术语为经济学界所借用，反映贫者愈贫，富者愈富，赢家通吃的经济学中收入分配不公的现象。马太效应揭示了一个不断增长个人和企业资源的需求原理，关系到个人的成功和生活幸福，因此它是影响企业发展和个人成功的一个重要法则。&lt;/p&gt;
&lt;p&gt;在教育方面的长期马太效应被运用在心理学家Keith Stanovich的研究中，他曾广泛做了对阅读能力和语言残疾的研究。 Stanovich用「马太效应」一词，来形容早期成功获取阅读能力，通常会导致作为学习者成人后的成功这一现象，而如若没有能在头三年或四年中获得阅读能力，将可能造成长期的、学习不同新技能的困难。儿童在开始阅读方面的落后，也将增加他们与同龄人之间的差距。后来，当学生需要“从阅读中学习”（其中，然后才学习阅读），他们的阅读困难会进一步造成学习大多数其他科目的问题。这样，他们的知识和能力会逐步下降，并进一步在学业上落后，跌幅会比同龄人越发增高。&lt;/p&gt;
&lt;p&gt;学生阅读能力愈高，对词汇和世界知识的增长愈快、愈多，这结果进一步提升阅读能力，两者良性地循环；阅读能力愈低，对词汇和世界知识的增长愈慢、愈少，这结果进一步妨碍阅读能力的发展，两者恶性地循环。於是，高阅读能力的儿童，与低阅读能力的儿童，在语文能力、对世界的认识等智能上的表现，差异只会愈来愈大，贫者愈贫，富者愈富，始终无法修补。&lt;/p&gt;
&lt;p&gt;因此，如果教师和家长对能力落后的儿童抱持观望，期望他们的阅读能力能随年岁增长而自然赶及，这种想法实在不切实际。&lt;/p&gt;
&lt;p&gt;爱情中的马太效应&lt;/p&gt;
&lt;p&gt;跟经济学的马太效应不同的是，爱情中的马太效应并不简单地是拿情感做成本，越滚越多；而是如果处于情感的包围 中，心态就会很好，人放松，对快乐敏感，对伤害迟钝，再加上激素作用，让人容光焕发，这些都会更具对异性的吸引力。当然，异性的微妙的竞争心理，也促进了爱情的马太效应。所以如果没有被爱包围，至少要模拟被包围的那种状态，把心态放松 ，随时处于接收的状态，像一台不断调试的收音机，爱情就比较容易到来。&lt;/p&gt;
&lt;p&gt;何谓品牌资本的马太效应&lt;/p&gt;
&lt;p&gt;品牌资本的马太效应是指，某个行业或产业的产品或服务，品牌知名度越大，品牌的价值越高，其忠实的消费者就越多，势必其占有的市场份额就越大。反之，某个行业或产业的产品或服务，品牌知名度越小，品牌的价值越低，其忠实的消费者就越少，势必其占有的市场份额就越小，将导致利润减少，被市场淘汰，其让位的市场将会被品牌知名度高的产品或服务代替。&lt;/p&gt;
&lt;p&gt;马太效应（Matthew Effect），在品牌资本领域内就是普遍存在的市场现象：强者恒强，弱者恒弱，或者说，赢家通吃。&lt;/p&gt;
&lt;p&gt;品牌资本马太效实践成功的案例&lt;/p&gt;
&lt;p&gt;品牌资本的核心价值是标准和技术，衍生的价值为消费者对品牌的认可和品牌营销系统的构建。&lt;/p&gt;
&lt;p&gt;最高形态的资本是企业品牌价值；无形形态的资本是企业知识产权的价值；固化形态的资本是企业的机器设备和不动产。对于企业来讲，一流企业出标准，二流企业出技术，三流企业出产品，四流企业出效益。&lt;/p&gt;
&lt;p&gt;企业惟有借助航空母舰般的“品牌资本”在行业中利用制订标准和塑造企业品牌形象，才能立于不败之地。&lt;/p&gt;
&lt;p&gt;尤其在软件技术、电子技术等关键领域，核心技术更是企业生存和发展的命脉。一些科技发达国家及跨国公司仍凭借对很多领域技术标准的控制，左右着产业格局的变化。因此，企业只有极力创新、参与制定具有自主知识产权的标准，占据品牌资本，才可能在自身领域占领技术制高点，获得市场竞争优势。&lt;/p&gt;
&lt;p&gt;高通、微软、日本6C联盟都是凭借标准制胜中国市场的典型。CDMA相关技术在高通的运作下成为其所掌握的专利和国际标准，所有生产CDMA相关通讯产品的企业都必须向高通交纳CDMA的入门费和使用费，高通由此一跃成为坐拥标准、日进斗金的跨国企业。&lt;/p&gt;
&lt;p&gt;星巴克公司品牌资本的马太效应创造了成功的奇迹，在华尔街，星巴克早已成为投资者心目中的安全港，过去十年间，它的股价在经历了四次分拆之后攀升了22倍，收益之高超过了通用电气、百事可乐、可口可乐、微软以及IBM等大公司。是什么创造了星巴克奇迹？将星巴克一手带大的舒尔茨回答：“我们的最大优势就是与合作者们相互信任，关键问题在于我们如何在高速发展中，保持企业价值观和指导原则的一致性。”&lt;/p&gt;
&lt;p&gt;职业发展中的马太效应&lt;/p&gt;
&lt;p&gt;那些没有发展目标、没有发展规划、也无积极心态的人，在发展中容易陷入负面循环，局面会越来越局促并难以突破[1]  ；而那些从一开始有目标、有计划且心态积极、有闯劲的人，即使遇到一些困难，也能通过不断努力排除障碍，破茧成蝶，往越来越好的方向发展。这样的两极分化，其实就是职业生涯中的马太效应[1]  。&lt;/p&gt;
&lt;p&gt;马太效应对个人发展最严重的影响就是它所产生的连锁反应[1]  。当个人职业发展不好，其所接触到的资源、平台和人脉也越来越贫乏，在外部环境、条件和资源都越来越欠缺的状况下，个人发展是很难有所突破的[1]  。将此放入组织内部考察就会发现，在组织规模越大的企业里，马太效应越发明显。核心部门的员工、业务骨干等，与边缘部门及辅助人员等除了薪资有巨大的差别外，所拥有的资源、晋升机会、发展平台、人脉等也相差甚远[1]  。&lt;/p&gt;
&lt;p&gt;要避免马太效应对自身职业发展的负面影响，需要激流勇进[1]  。一是要明确职业定位，树立清晰目标[1]  。二是要通过自身努力和优化，获得好资源、好平台[1]  。三是要让好心态成为好运气的吸金石[1]  。有的职场人错误的以为，不咸不淡的呆着就能自保饭碗[1]  。其实弱者是很难参与分配优质资源，没有好资源就难发展，而终将难逃被淘汰的命运[1]  。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;马太效应（Matthew Effect），指强者愈强、弱者愈弱的现象，广泛应用于社会心理学、教育、金融以及科学领域。马太效应，是社会学家和经济学家们常用的术语，反映的社会现象是两级分化，富的更富，穷的更穷[1]  。名字来自圣经《新约·马太福音》一则寓言： “凡有的，还要加倍给他叫他多余；没有的，连他所有的也要夺过来”。“马太效应”与“平衡之道”相悖；与“二八定则”类似，是十分重要的自然法则。中国古代哲学家老子曾提出类似的思想：“天之道，损有余而补不足。人之道则不然，损不足以奉有余。”&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://cooooper.github.io/2016/05/18/hello-world/"/>
    <id>http://cooooper.github.io/2016/05/18/hello-world/</id>
    <published>2016-05-18T09:17:47.000Z</published>
    <updated>2016-05-18T09:17:47.000Z</updated>
    
    <content type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>iOS 面试题汇总</title>
    <link href="http://cooooper.github.io/2016/05/18/iOS-%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://cooooper.github.io/2016/05/18/iOS-面试题汇总/</id>
    <published>2016-05-18T08:38:49.000Z</published>
    <updated>2016-11-24T04:05:38.000Z</updated>
    
    <content type="html">&lt;p&gt;#####初级部分&lt;/p&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;最近这两天你有学到什么知识/技能么？&lt;/li&gt;
&lt;li&gt;最近有做过比较酷或者比较有挑战的项目么？&lt;/li&gt;
&lt;li&gt;最近看过的书/文章有哪些？&lt;/li&gt;
&lt;li&gt;如何向一个只接触过互联网的孩子解释「电视」？&lt;/li&gt;
&lt;li&gt;为什么要学习编程，编程对你而言的乐趣在哪儿？&lt;/li&gt;
&lt;li&gt;如果一个函数10次中有7次正确，3次错误，问题可能出现在哪里？&lt;/li&gt;
&lt;li&gt;自身最大优点是什么，怎么证明？&lt;/li&gt;
&lt;li&gt;有没有在 GitHub 上发布过开源代码，参与过开源项目？&lt;/li&gt;
&lt;li&gt;你最近遇到过的一个技术挑战是什么？怎么解决的？&lt;/li&gt;
&lt;li&gt;开发常用的工具有哪些？&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;熟悉 CocoaPods 么？能大概讲一下工作原理么？&lt;/li&gt;
&lt;li&gt;最常用的版本控制工具是什么，能大概讲讲原理么？&lt;/li&gt;
&lt;li&gt;今年你最想掌握的一门技术是什么？为什么？目前已经做到了哪个程度？&lt;/li&gt;
&lt;li&gt;你一般是怎么用 Instruments 的？&lt;/li&gt;
&lt;li&gt;你一般是如何调试 Bug 的？&lt;/li&gt;
&lt;li&gt;你在你的项目中用到了哪些设计模式？&lt;/li&gt;
&lt;li&gt;如何实现单例，单例会有什么弊端？&lt;/li&gt;
&lt;li&gt;iOS 是如何管理内存的？&lt;/li&gt;
&lt;li&gt;什么是响应链，它是怎么工作的？&lt;/li&gt;
&lt;li&gt;如何访问并修改一个类的私有属性？&lt;/li&gt;
&lt;li&gt;iOS Extension 是什么？能列举几个常用的 Extension 么？&lt;/li&gt;
&lt;li&gt;如何把一个包含自定义对象的数组序列化到磁盘？&lt;/li&gt;
&lt;li&gt;Apple Pay 是什么？它的大概工作流程是怎样的？&lt;/li&gt;
&lt;li&gt;iOS 的沙盒目录结构是怎样的？ App Bundle 里面都有什么？&lt;/li&gt;
&lt;li&gt;iOS 的签名机制大概是怎样的？&lt;/li&gt;
&lt;li&gt;iOS 7的多任务添加了哪两个新的 API? 各自的使用场景是什么？&lt;/li&gt;
&lt;li&gt;Objective-C 的 class 是如何实现的？Selector 是如何被转化为 C 语言的函数调用的？&lt;/li&gt;
&lt;li&gt;UIScrollView 大概是如何实现的，它是如何捕捉、响应手势的？&lt;/li&gt;
&lt;li&gt;Objective-C 如何对已有的方法，添加自己的功能代码以实现类似记录日志这样的功能？&lt;br&gt;+load 和 +initialize 的区别是什么？&lt;/li&gt;
&lt;li&gt;如何让 Category 支持属性？&lt;/li&gt;
&lt;li&gt;NSOperation 相比于 GCD 有哪些优势？&lt;/li&gt;
&lt;li&gt;strong / weak / unsafe_unretained 的区别？&lt;/li&gt;
&lt;li&gt;如何为 Class 定义一个对外只读对内可读写的属性?&lt;/li&gt;
&lt;li&gt;Objective-C 中，meta-class 指的是什么？&lt;/li&gt;
&lt;li&gt;UIView 和 CALayer 之间的关系？&lt;/li&gt;
&lt;li&gt;+[UIView animateWithDuration:animations:completion:] 内部大概是如何实现的？&lt;/li&gt;
&lt;li&gt;什么时候会发生「隐式动画」？&lt;/li&gt;
&lt;li&gt;如何处理异步的网络请求？&lt;/li&gt;
&lt;li&gt;frame 和 bounds 的区别是什么？&lt;/li&gt;
&lt;li&gt;如何把一张大图缩小为1/4大小的缩略图？&lt;/li&gt;
&lt;li&gt;一个 App 会处于哪些状态？&lt;/li&gt;
&lt;li&gt;Push Notification 是如何工作的？&lt;/li&gt;
&lt;li&gt;什么是 Runloop？&lt;/li&gt;
&lt;li&gt;Toll-Free Bridging 是什么？什么情况下会使用？&lt;/li&gt;
&lt;li&gt;当系统出现内存警告时会发生什么？&lt;/li&gt;
&lt;li&gt;什么是 Protocol，Delegate 一般是怎么用的？&lt;/li&gt;
&lt;li&gt;autorelease 对象在什么情况下会被释放？&lt;/li&gt;
&lt;li&gt;UIWebView 有哪些性能问题？有没有可替代的方案。&lt;/li&gt;
&lt;li&gt;为什么 NotificationCenter 要 removeObserver? 如何实现自动 remove?&lt;/li&gt;
&lt;li&gt;当 TableView 的 Cell 改变时，如何让这些改变以动画的形式呈现？&lt;/li&gt;
&lt;li&gt;@property中有哪些属性关键字？&lt;/li&gt;
&lt;li&gt;weak属性需要在dealloc中置nil么？&lt;/li&gt;
&lt;li&gt;objc使用什么机制管理对象内存？&lt;/li&gt;
&lt;li&gt;使用block时什么情况会发生引用循环，如何解决？&lt;/li&gt;
&lt;li&gt;在block内如何修改block外部变量？&lt;/li&gt;
&lt;li&gt;GCD的队列（dispatch_queue_t）分哪两种类型？&lt;/li&gt;
&lt;li&gt;addObserver:forKeyPath:options:context:各个参数的作用分别是什么，observer中需要实现哪个方法才能获得KVO回调？&lt;/li&gt;
&lt;li&gt;如何手动触发一个value的KVO&lt;/li&gt;
&lt;li&gt;若一个类有实例变量NSString *_foo，调用setValue:forKey:时，可以以foo还是_foo作为key？&lt;/li&gt;
&lt;li&gt;IBOutlet连出来的视图属性为什么可以被设置成weak?&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;#####中级部分&lt;/p&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;为什么 UIScrollView 的滚动会导致 NSTimer 失效？&lt;/li&gt;
&lt;li&gt;为什么当 Core Animation 完成时，layer 又会恢复到原先的状态？&lt;/li&gt;
&lt;li&gt;你会如何存储用户的一些敏感信息，如登录的 token。&lt;/li&gt;
&lt;li&gt;有用过一些开源组件吧，能简单说几个么，大概说说它们的使用场景实现。&lt;/li&gt;
&lt;li&gt;什么时候会发生 EXC BAD ACCESS 异常？&lt;/li&gt;
&lt;li&gt;什么时候会使用 Core Graphics，有什么注意事项么？&lt;/li&gt;
&lt;li&gt;NSNotification 和 KVO 的使用场景？&lt;/li&gt;
&lt;li&gt;使用 Block 时需要注意哪些问题？&lt;/li&gt;
&lt;li&gt;performSelector:withObject:afterDelay: 内部大概是怎么实现的，有什么注意事项么？&lt;/li&gt;
&lt;li&gt;如何播放 GIF 图片，有什么优化方案么？&lt;/li&gt;
&lt;li&gt;使用 NSUserDefaults 时，如何处理布尔的默认值？(比如返回 NO，不知道是真的 NO 还是没有设置过)&lt;/li&gt;
&lt;li&gt;有哪几种方式可以对图片进行缩放，使用 CoreGraphics 缩放时有什么注意事项？&lt;/li&gt;
&lt;li&gt;哪些途径可以让 ViewController 瘦下来？&lt;/li&gt;
&lt;li&gt;有哪些常见的 Crash 场景？&lt;/li&gt;
&lt;li&gt;设计一个可以无限滚动并且支持自动滚动的 SlideShow。&lt;/li&gt;
&lt;li&gt;设计一个进度条。&lt;/li&gt;
&lt;li&gt;设计一套大文件（如上百M的视频）下载方案。&lt;/li&gt;
&lt;li&gt;如果让你来实现 dispatch_once，你会怎么做？&lt;/li&gt;
&lt;li&gt;设计一个类似 iOS 主屏可以下拉出现 Spotlight 的系统。(对 UIScrollView 的理解程度)&lt;/li&gt;
&lt;li&gt;@synthesize和@dynamic分别有什么作用&lt;/li&gt;
&lt;li&gt;ARC下，不显式指定任何属性关键字时，默认的关键字都有哪些？&lt;/li&gt;
&lt;li&gt;@synthesize合成实例变量的规则是什么？假如property名为foo，存在一个名为_foo的实例变量，那么还会自动合成新变量么？&lt;/li&gt;
&lt;li&gt;objc中向一个nil对象发送消息将会发生什么？&lt;/li&gt;
&lt;li&gt;objc中向一个对象发送消息[obj foo]和objc_msgSend()函数之间有什么关系？&lt;/li&gt;
&lt;li&gt;什么时候会报unrecognized selector的异常？&lt;/li&gt;
&lt;li&gt;runloop和线程有什么关系？&lt;/li&gt;
&lt;li&gt;runloop的mode作用是什么？&lt;/li&gt;
&lt;li&gt;ARC通过什么方式帮助开发者管理内存&lt;/li&gt;
&lt;li&gt;不手动指定autoreleasepool的前提下，一个autorealese对象在什么时刻释放？（比如在一个vc的viewDidLoad中创建）&lt;/li&gt;
&lt;li&gt;BAD_ACCESS在什么情况下出现？&lt;/li&gt;
&lt;li&gt;使用系统的某些block api（如UIView的block版本写动画时），是否也考虑引用循环问题？&lt;/li&gt;
&lt;li&gt;如何用GCD同步若干个异步调用？（如根据若干个url异步加载多张图片，然后在都下载完成后合成一张整图）&lt;/li&gt;
&lt;li&gt;如何调试BAD_ACCESS错误&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;#####高级部分&lt;/p&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;你使用过Objective-C的运行时编程（Runtime Programming）么？如果使用过，你用它做了什么？你还能记得你所使用的相关的头文件或者某些方法的名称吗？&lt;/li&gt;
&lt;li&gt;Core开头的系列的内容。是否使用过CoreAnimation和CoreGraphics。UI框架和CA，CG框架的联系是什么？分别用CA和CG做过些什么动画或者图像上的内容。（有需要的话还可以涉及Quartz的一些内容）&lt;/li&gt;
&lt;li&gt;是否使用过CoreText或者CoreImage等？如果使用过，请谈谈你使用CoreText或者CoreImage的体验。&lt;/li&gt;
&lt;li&gt;NSNotification和KVO的区别和用法是什么？什么时候应该使用通知，什么时候应该使用KVO，它们的实现上有什么区别吗？如果用protocol和delegate（或者delegate的Array）来实现类似的功能可能吗？如果可能，会有什么潜在的问题？如果不能，为什么？（虽然protocol和delegate这种东西面试已经面烂了…）&lt;/li&gt;
&lt;li&gt;你用过NSOperationQueue么？如果用过或者了解的话，你为什么要使用NSOperationQueue，实现了什么？请描述它和GCD的区别和类似的地方（提示：可以从两者的实现机制和适用范围来描述）。&lt;/li&gt;
&lt;li&gt;既然提到GCD，那么问一下在使用GCD以及block时要注意些什么？它们两是一回事儿么？block在ARC中和传统的MRC中的行为和用法有没有什么区别，需要注意些什么？&lt;/li&gt;
&lt;li&gt;您是否做过异步的网络处理和通讯方面的工作？如果有，能具体介绍一些实现策略么？&lt;/li&gt;
&lt;li&gt;对于Objective-C，你认为它最大的优点和最大的不足是什么？对于不足之处，现在有没有可用的方法绕过这些不足来实现需求。如果可以的话，你有没有考虑或者实践过重新实现OC的一些功能，如果有，具体会如何做？&lt;/li&gt;
&lt;li&gt;你实现过一个框架或者库以供别人使用么？如果有，请谈一谈构建框架或者库时候的经验；如果没有，请设想和设计框架的public的API，并指出大概需要如何做、需要注意一些什么方面，来使别人容易地使用你的框架。&lt;/li&gt;
&lt;li&gt;用@property声明的NSString（或NSArray，NSDictionary）经常使用copy关键字，为什么？如果改用strong关键字，可能造成什么问题？&lt;/li&gt;
&lt;li&gt;在有了自动合成属性实例变量之后，@synthesize还有哪些使用场景？&lt;/li&gt;
&lt;li&gt;一个objc对象如何进行内存布局？（考虑有父类的情况&lt;/li&gt;
&lt;li&gt;一个objc对象的isa的指针指向什么？有什么作用？&lt;/li&gt;
&lt;li&gt;runtime如何通过selector找到对应的IMP地址？（分别考虑类方法和实例方法）&lt;/li&gt;
&lt;li&gt;使用runtime Associate方法关联的对象，需要在主对象dealloc的时候释放么？&lt;/li&gt;
&lt;li&gt;objc中的类方法和实例方法有什么本质区别和联系？&lt;/li&gt;
&lt;li&gt;_objc_msgForward函数是做什么的，直接调用它将会发生什么？&lt;/li&gt;
&lt;li&gt;runtime如何实现weak变量的自动置nil？&lt;/li&gt;
&lt;li&gt;能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么&lt;/li&gt;
&lt;li&gt;以+ scheduledTimerWithTimeInterval…的方式触发的timer，在滑动页面上的列表时，timer会暂定回调，为什么？如何解决？&lt;/li&gt;
&lt;li&gt;猜想runloop内部是如何实现的？&lt;/li&gt;
&lt;li&gt;苹果是如何实现autoreleasepool的？&lt;/li&gt;
&lt;li&gt;dispatch_barrier_async的作用是什么&lt;/li&gt;
&lt;li&gt;苹果为什么要废弃dispatch_get_current_queue？&lt;/li&gt;
&lt;li&gt;KVC的keyPath中的集合运算符如何使用？&lt;/li&gt;
&lt;li&gt;KVC和KVO的keyPath一定是属性么？&lt;/li&gt;
&lt;li&gt;如何关闭默认的KVO的默认实现，并进入自定义的KVO实现&lt;/li&gt;
&lt;li&gt;apple用什么方式实现对一个对象的KVO？&lt;/li&gt;
&lt;li&gt;IB中User Defined Runtime Attributes如何使用？&lt;/li&gt;
&lt;li&gt;lldb（gdb）常用的调试命令？&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;#####初级部分&lt;/p&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;最近这两天你有学到什么知识/技能么？&lt;/li&gt;
&lt;li&gt;最近有做过比较酷或者比较有挑战的项目么？&lt;/li&gt;
&lt;li&gt;最近看过的书/文章有哪些？&lt;/li&gt;
&lt;li&gt;如何向一个只接触过互联网的孩子解释「电视」？&lt;/li&gt;
&lt;li&gt;为什么要学习编程，编程对你而言的乐趣在哪儿？&lt;/li&gt;
&lt;li&gt;如果一个函数10次中有7次正确，3次错误，问题可能出现在哪里？&lt;/li&gt;
&lt;li&gt;自身最大优点是什么，怎么证明？&lt;/li&gt;
&lt;li&gt;有没有在 GitHub 上发布过开源代码，参与过开源项目？&lt;/li&gt;
&lt;li&gt;你最近遇到过的一个技术挑战是什么？怎么解决的？&lt;/li&gt;
&lt;li&gt;开发常用的工具有哪些？&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="ios" scheme="http://cooooper.github.io/tags/ios/"/>
    
  </entry>
  
  <entry>
    <title>ideabinder iOS 工程师 岗位要求</title>
    <link href="http://cooooper.github.io/2016/05/18/ideabinder-iOS-%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%B2%97%E4%BD%8D%E8%A6%81%E6%B1%82/"/>
    <id>http://cooooper.github.io/2016/05/18/ideabinder-iOS-工程师岗位要求/</id>
    <published>2016-05-18T06:55:40.000Z</published>
    <updated>2016-11-24T04:05:25.000Z</updated>
    
    <content type="html">&lt;p&gt;岗位职责：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;[独立开发] 能够独立完成客户端应用的功能开发&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[功能调试] 负责客户端的单元测试及功能调试&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[持续优化] 能够对现有项目进行维护及持续优化，并能及时添加对iOS新特性的支持&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[编写文档] 参与工程类相关文档的编写与维护工作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[反馈问题] 主动发现问题，及时向主管反馈&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;岗位要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;为人正直、诚实守信、认真负责&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一年以上iOS客户端开发经验，深入理解面向对象编程思想，具有扎实的Objective-C的语言基础，良好的编码风格，掌握SQLite数据库的基本操作及HTTP/HTTPS网络协议相关知识&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对内存管理机制有较深了解，了解多线程编程，对MVC框架及常见设计模式有自己的见解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;具有团队合作精神，优秀的分析、解决问题能力，快速学习能力，能从具体业务出发对新技术进行研究和运用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;追求更好的用户体验，并能提出自己的见解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算机及软件相关专业本科学历及以上者优先考虑&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实习岗：[技术定向生 —— iOS开发方向]     &lt;/p&gt;
&lt;p&gt;岗位职责：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;[学习技术] 学习并研究技术主管所安排的技术点     &lt;/li&gt;
&lt;li&gt;[功能开发] 根据主管的任务安排，完成小型独立模块或控件的开发工作      &lt;/li&gt;
&lt;li&gt;[单元测试] 负责iOS客户端的单元测试，参与系统的集成测试    &lt;/li&gt;
&lt;li&gt;[文档编写] 参与工程类相关文档的编写与维护工作      &lt;/li&gt;
&lt;li&gt;[反馈问题] 主动发现问题，及时向主管反馈&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;岗位要求：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为人正直，诚实守信、认真负责&lt;/li&gt;
&lt;li&gt;理解面向对象编程思想，熟悉iOS系统并具有Objective-C的语言基础，了解数据库的基本操作&lt;/li&gt;
&lt;li&gt;具有团队合作精神，良好的沟通能力，勇于承担责任&lt;/li&gt;
&lt;li&gt;具有强烈的求知欲，对技术狂热，有快速学习能力 &lt;/li&gt;
&lt;li&gt;计算机相关专业本科及以上者，具有移动互联项目开发经验者优先&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;岗位职责：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;[独立开发] 能够独立完成客户端应用的功能开发&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[功能调试] 负责客户端的单元测试及功能调试&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[持续优化] 能够对现有项目进行维护及持续优化，并能及时添加对iOS新特性的支持&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[编写文档] 参与工程类相关文档的编写与维护工作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[反馈问题] 主动发现问题，及时向主管反馈&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
